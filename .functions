#!/usr/bin/env zsh

# Find any application's UTI (Uniform Type Identier), A.K.A. Bundle ID (CFBundleIdentifier) # https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_intro/understand_utis_intro.html
app() {
  case $1 in
  id | uti | identifier | cfbundleidentifer)
    osascript -e 'id of app "'$2'"'
    ;;
  -v | version)
    osascript -e 'version of app "'$2'"'
    ;;
  *)
    echo $bold${red}Invalid$reset argument!
    ;;
  esac
}

# Benchmark using https://github.com/sharkdp/hyperfine
bm() {
  local command1='. ~/.zshrc;
verbose=true
if [[ $verbose == true ]]; then
  lazy='wait'
  plugin='load'
fi'
  local command2='. ~/.zshrc;
declare verbose
if [[ -v $verbose ]]; then
  lazy='wait'
  plugin='load'
fi'

  case $1 in
  --verbose | -v)
    hyperfine --shell bash --warmup 2 --time-unit second "$command1" "$command2" --show-output
    ;;
  *)
    hyperfine --shell bash --warmup 2 --time-unit second "$command1" "$command2"
    ;;
  esac
}

# Change working directory to the top-most Finder window location
cdf() {
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

change() {
  case $1 in
  bash)
    printf "Changing shell to${bold}bash${reset}...\n"
    chsh -s /usr/local/bin/bash
    sudo dscl . -change /Users/$USER UserShell /usr/local/bin/zsh /usr/local/bin/bash ||
      sudo dscl . -create /Users/$USER UserShell /usr/local/bin/zsh
    ;;
  zsh)
    printf "Changing shell to ${bold}zsh$reset ...\n"
    chsh -s /usr/local/bin/zsh
    sudo dscl . -change /Users/$USER UserShell /usr/local/bin/bash /usr/local/bin/zsh ||
      sudo dscl . -create /Users/$USER UserShell /usr/local/bin/zsh
    ;;
  *)
    printf "${bold}${red}Invalid${reset} argument!\n"
    ;;
  esac
}

cleanupNotificationCenter() {
  # [ ! -f $file.bak ] && sqlite3 $file ".backup $file.bak"
  # sqlite3 $(getconf DARWIN_USER_DIR)com.apple.notificationcenter/db2/db 'SELECT identifier FROM app WHERE identifier LIKE "%canary%";'
  sqlite3 $(getconf DARWIN_USER_DIR)com.apple.notificationcenter/db2/db 'DELETE FROM app WHERE identifier LIKE "%canary%";'
}

cls() {
  local systemAppearance=$(defaults read -g AppleInterfaceStyle 2> /dev/null)
  case $systemAppearance in
  Dark)
    colorls -a --sd --dark
    ;;
  *)
    colorls -a --sd --light
    ;;
  esac
}

# chmod shortcuts
cm() {
  case $1 in
  reset)
    case $1 in
    file | -f)
      chmod 644
      ;;
    directory | dir | -d)
      chmod 755
      ;;
    esac
    ;;
  help | --help | -h)
    echo "${yellow}File$reset: ${bold}chmod 644$reset"
    echo "${yellow}Directory$reset: ${bold}chmod 755$reset"
    ;;
  *)
    chmod u+x $1
    ;;
  esac
}

# Print creation date of file
created() {
  GetFileInfo -d $1 | head -c 10
}

# Easily get and set dns servers on Mac
dns() {
  # https://servers.opennic.org/
  local ip=($(echo $DNSSERVERS | cut -d' ' -f1))
  local name=($(echo $DNSSERVERS | cut -d' ' -f2))
  case $1 in
  set)
    networksetup -setdnsservers Wi-Fi $ip[@]
    networksetup -setdnsservers 'Thunderbolt Ethernet' $ip[@]
    ;;
  clr | clear | reset)
    networksetup -setdnsservers Wi-Fi Empty
    networksetup -setdnsservers 'Thunderbolt Ethernet' Empty
    echo DNS Servers cleared!
    ;;
  *)
    echo ${bold}Wi-Fi$reset
    paste <(networksetup -getdnsservers Wi-Fi) <(printf '%s\n' $name[@]) | column -ts $'\t'
    echo ${bold}Thunderbolt Ethernet$reset
    paste <(networksetup -getdnsservers 'Thunderbolt Ethernet') <(printf '%s\n' $name[@]) | column -ts $'\t'
    ;;
  esac
}

# Combine Homebrew & NPM `doctor` command
dr() {
  printf "Running ${bold}brew doctor$reset...\n" && brew doctor
  printf "Running ${bold}brew cask doctor$reset...\n" && brew cask doctor
  printf "Running ${bold}npm doctor$reset...\n" && npm doctor
  printf "Finished ${bold}dr$reset!\n"
  notify "dr" "Finished dr!"
}

# Keyboard shortcuts I want to memorize
finder() {
  printf "\
${bold}Finder$reset
⌘ ↑\t${yellow}Enclosing Folder$reset
⌘ ↓\t${yellow}Open the selected item$reset
⌥ ⌘ L\t${yellow}Downloads$reset
⇧ ⌘ H\t${yellow}Home$reset
"
}

foo() {
  echo foo
}

hexColor() {
  # https://gist.github.com/mhulse/b11e568260fb8c3aa2a8
  hex=$2
  if [[ $hex == "#"* ]]; then
    hex=$(echo $2 | awk '{print substr($0,2)}')
  fi
  r=$(printf '0x%0.2s' "$hex")
  g=$(printf '0x%0.2s' ${hex#??})
  b=$(printf '0x%0.2s' ${hex#????})
  xtermColorNumber=$(printf $(printf "%03d" "$(((r < 75 ? 0 : (r - 35) / 40) * 6 * 6 + (g < 75 ? 0 : (g - 35) / 40) * 6 + (b < 75 ? 0 : (b - 35) / 40) + 16))"))
  case $1 in
  foreground | fg | af)
    tput setaf $xtermColorNumber
    ;;
  background | bg | ab)
    tput setab $xtermColorNumber
    ;;
  esac
}

highlight() {
  local brewls0="'$1'"
  local brewls1=${brewls0// / ${bold}} # Replace space with space+bold
  echo ${brewls1//$'\n'/${reset}'\n'} # Replace newline with reset+newline & print
}

# Keyboard shortcuts I want to memorize
iterm() {
  printf "\
${bold}iTerm$reset
⌘ ⇧ O\t${yellow}Open Quickly$reset
⌘ ;\t${yellow}Open Autocomplete$reset
⌘ ⇧ ;\t${yellow}Open Command History$reset
⌘ ⇧ H\t${yellow}Open Paste History$reset
⌘ ⌥ /\t${yellow}Open Recent Directories$reset
⌘ ⌥ B\t${yellow}Start Instant Replay$reset
"
}

# Open man page in Google Chrome
manchrome() {
  man "$1" | col -b > "/tmp/$1"
  open -a "/Applications/Google Chrome.app" "/tmp/$1"
}

# Open man page in VSCode
mancode() {
  man "$1" | col -b > "/tmp/$1"
  code /private/tmp/$1
}

# Open man page in Preview
manpreview() {
  man -t "$@" | open -fa Preview
}

# Create a new directory and enter it
mkd() {
  mkdir -p "$@" && cd "$_"
}

# Easy custom Mac notifications from iTerm2 and VSCode
notify() {
  if [[ $TERM_PROGRAM == 'iTerm.app' ]]; then
    terminal-notifier -group "ITERM" -title $1 -message $2 -sender "com.googlecode.iterm2"
  else
    terminal-notifier -group "VSCODE" -title $1 -message $2 -sender "com.microsoft.VSCode"
  fi
}

# Pretty-print PATH variable
path() {
  case $1 in
  -u) # unique
    echo ${PATH//:/\\n} | awk '!seen[$0]++'
    ;;
  *)
    echo ${PATH//:/\\n}
    ;;
  esac
}

prompt() {
  printf "$1 [${green}y$reset/${red}N$reset]: "
  if read -q; then
    $2
  else
    echo " $redb$black Aborting $reset $bold$funcstack[1]$reset..."
  fi
}

# Reload scripts &/or shell
r() {
  case $1 in
  zsh | -z)
    # https://github.com/robbyrussell/oh-my-zsh/blob/master/plugins/zsh_reload/zsh_reload.plugin.zsh
    local cache="$ZSH_CACHE_DIR"
    autoload -U compinit zrecompile
    compinit -i -d "$cache/zcomp-$HOST"

    for f in ~/.zshrc "$cache/zcomp-$HOST"; do
      zrecompile -p $f && command rm -f $f.zwc.old
    done

    # Use $SHELL if available; remove leading dash if login shell
    [[ -n "$SHELL" ]] && exec ${SHELL#-} || exec zsh
    ;;
  *)
    . $DOTS/.aliases
    .                   $DOTS/.functions
    tput                                       cl
    ;;
  esac
}

# Fully reinstall node_modules to fix NPM errors
reinstall() {
  printf "Are you sure you want to ${bold}reinstall$reset $yellow/node_modules$reset? [${green}y$reset/${red}n$reset]: "
  if read -q; then
    printf "\nRunning ${bold}trash package-lock.json$reset...\n" && trash package-lock.json
    printf "Running ${bold}trash node_modules$reset...\n" && trash node_modules
    printf "Running ${bold}npm install$reset...\n" && npm install
  else
    echo " $redb$black Aborting $reset $bold$funcstack[1]$reset..."
  fi
}

# Check active shell on Mac
shell() {
  {
    printf "${bold}SHELLS$reset " && sed -n 5p /etc/shells
    echo ${bold}\$SHELL$reset $SHELL
  } | column -t
  dscl . -read /Users/$USER UserShell
  echo ${bold}ps -p \"\$\$\"$reset
  ps -p "$$"
}

# Keyboard shortcuts I want to memorize
shortcuts() {
  finder
  iterm
  mac
}

# Verify that SSD Mac is not saving sleep images
sleepimage() {
  pmset -g | grep --color hibernatemode
  ls -lh /private/var/vm/sleepimage | grep B
}

themes() {
  local themes=(
    amomum.theme-verdigris-light
    bimbo1989.code-with-a-tan
    ChirtleLovesDolls.nebula-theme
    evturn.cosmic-barf
    felipe-mendes.slack-theme
    j0hnm4r5.laser-theme
    jaredkent.laserwave
    jeremycantu.hack3r-theme
    liviuschera.noctis
    max-SS.cyberpunk
    max-SS.Cyberpunk
    PKief.material-icon-theme
    samrapdev.outrun
    theapemachine.scarface-theme
    zeebo.hacker-colors
  )
  case $1 in
  uninstall)
    prompt 'Install extra themes?' 'code --install-extension $themes[@]'
    ;;
  *)
    prompt 'Uninstall extra themes?' 'code --uninstall-extension $themes[@]'
    ;;
  esac
}

trash() {
  osascript -e "tell application \"Finder\" to delete POSIX file \"$PWD/$1\""
}

# Update all system tools
update() {
  printf "$greenb${black} START $reset $bold${green}update$reset!\n"
  printf "${bold}upgrade_oh_my_zsh$reset... " && upgrade_oh_my_zsh | head -2
  # printf "${bold}zplg update --all${reset}\n" && zplg update --all
  # printf "${bold}zplg self-update${reset}\n" && zplg self-update
  printf "${bold}git pull$reset ${blue}powerlevel10k.zsh-theme$reset... " && cd $ZSH/custom/themes/powerlevel10k && git pull && cd - > /dev/null
  printf "${bold}git pull$reset ${blue}fast-syntax-highlighting$reset... " && cd $ZSH/custom/plugins/fast-syntax-highlighting && git pull && cd - > /dev/null
  printf "${bold}git pull$reset ${blue}zsh-autosuggestions$reset... " && cd $ZSH/custom/plugins/zsh-autosuggestions && git pull && cd - > /dev/null
  printf "${bold}rustup update $reset" && rustup update
  printf "${bold}brew upgrade$reset\n" && brew upgrade
  printf "${bold}brew cask upgrade $reset" && brew cask upgrade
  printf "${bold}brew cleanup$reset\n" && brew cleanup
  printf "${bold}npm update --global$reset\n" && npm update --global
  printf "${bold}tldr --update$reset\n" && tldr --update
  printf "${bold}mas upgrade $reset" && mas upgrade
  printf "${bold}softwareupdate --install --all$reset\n" && softwareupdate --install --all
  printf "$redb${black} END $reset $bold${green}update$reset!\n"
  notify "update" "Done!"
}

# List versions of all system tools
v() {
  case $1 in
  -v)
    printf "${bold}iTerm$reset $(app -v iterm | head -c 5)\n"
    printf "${bold}Rust$reset $(rustc --version | cut -d' ' -f2)\n"
    printf "${bold}zsh$reset $ZSH_VERSION\n"
    # printf "${bold}Zplugin$reset\n"
    # zplg list
    # zplg ls
    printf "\n${bold}npm$reset $(npm -v)\n"
    npm ls -gs --depth=0 | tail -n +2 | cut -c 5-
    printf "${bold}Homebrew$reset $(brew -v | xargs | head -c 14 | tail -c 5)$reset\n"
    brew ls --versions $(brew leaves)
    ;;
  -vl)
    printf "${bold}iTerm$reset $(app -v iterm | head -c 5)\n"
    printf "${bold}Rust$reset $(rustc --version | cut -f2)\n"
    printf "${bold}zsh$reset $ZSH_VERSION\n"
    # printf "${bold}Zplugin$reset\n"
    # zplg list
    # zplg ls
    printf "\n${bold}mas$reset $(mas version)\n"
    mas list
    printf "\n${bold}npm$reset $(npm -v)\n"
    npm ls -gs --depth=0 | tail -n +2 | cut -c 5-
    printf "${bold}Homebrew$reset $(brew -v | xargs | head -c 14 | tail -c 5)$reset\n"
    brew ls --versions $(brew leaves)
    printf "\n${bold}Casks$reset\n"
    brew cask ls --versions
    printf "\n${bold}VSCode$reset $(code -v | head -1)\n"
    code --list-extensions --show-versions
    ;;
  *)
    printf "${bold}iTerm$reset $(app -v iterm | head -c 5)\n"
    printf "${bold}zsh$reset $ZSH_VERSION\n"
    # printf "${bold}Zplugin$reset\n"
    printf "${bold}Rust$reset $(rustc --version | awk '{print $2}')\n"
    printf "${bold}Homebrew$reset $(brew -v | xargs | head -c 14 | tail -c 5)\n"
    printf "${bold}Node$reset $(node -v | tail -c 8)\n"
    printf "${bold}npm$reset $(npm -v)\n"
    printf "${bold}VSCode$reset $(code -v | head -1)\n"
    printf "${bold}Vue$reset $(vue --version)\n"
    # grep -E '\s([0-9].*)'
    ;;
  esac
}

# ESLint-warning-free webpack output for Vue CLI
wo() {
  printf '/* eslint-disable */\nconst webpack_output = ' > webpack_output.js
  vue inspect | tail -n +2 | sed "s/native code/'native code'/g" >> webpack_output.js
  code webpack_output.js
}
