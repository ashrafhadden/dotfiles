#!/usr/bin/env zsh

# Find any application's UTI (Uniform Type Identier), A.K.A. Bundle ID (CFBundleIdentifier) # https://developer.apple.com/library/archive/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_intro/understand_utis_intro.html
app() {
	case $1 in
	id | uti | identifier | cfbundleidentifer)
		osascript -e 'id of app "'$2'"'
		;;
	v | version)
		osascript -e 'version of app "'$2'"'
		;;
	*)
		printf  "${bold}${red}Invalid${reset} argument!"
		;;
	esac
}

# Change working directory to the top-most Finder window location
cdf() { # short for `cdfinder`
	cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Keyboard shortcuts I want to memorize
shortcuts() {
	finder
	iterm
}

# Print creation date of file
created() {
	GetFileInfo -d $1 | head -c 10
}

# Easily change & check dns servers on Mac
dns() {
	# https://servers.opennic.org/
	dnsservers="\
8.8.8.8 Google
8.8.4.4 Google
2001:4860:4860::8888 Google
2001:4860:4860::8844 Google
162.248.241.94 OpenNIC
172.98.193.42 OpenNIC"
	local ip=($(echo $Server_List | cut -d' ' -f1))
	local name=($(echo $Server_List | cut -d' ' -f2))
	case $1 in
	set)
		networksetup -setdnsservers "Wi-Fi" ${ip[@]}
		networksetup -setdnsservers "Thunderbolt Ethernet" ${ip[@]}
		;;
	clr | clear | reset)
		networksetup -setdnsservers Wi-Fi "Empty"
		networksetup -setdnsservers "Thunderbolt Ethernet" "Empty"
		printf "DNS Servers cleared!\n"
		;;
	*)
		paste <(networksetup -getdnsservers "Wi-Fi") <(printf '%s\n' "${dnsarrnames[@]}") | column -ts $'\t'
		;;
	esac
}

# Combine Homebrew & NPM `doctor` command
dr() {
	printf "Running ${bold}brew doctor${reset}...\n" && brew doctor
	printf "Running ${bold}brew cask doctor${reset}...\n" && brew cask doctor
	printf "Running ${bold}npm doctor${reset}...\n" && npm doctor
	printf "Finished ${bold}dr${reset}!\n"
	# notify "dr" "Finished dr!"
}

# Keyboard shortcuts I want to memorize
finder() {
	local string="\
${bold}Finder${reset}
⌘ \`\t${yellow}Cycle Through Windows${reset}
⌘ ↑\t${yellow}Enclosing Folder${reset}
⌘ ↓\t${yellow}Open the selected item${reset}
⌥ ⌘ L\t${yellow}Downloads${reset}
⇧ ⌘ H\t${yellow}Home${reset}"
	echo $string
}

highlight() {
	local brewls0="'$1'"
	local brewls1=${brewls0// / ${bold}} # Replace space with space+bold
	echo ${brewls1//$'\n'/${reset}'\n'}  # Replace newline with reset+newline & print
}

# Keyboard shortcuts I want to memorize
iterm() {
	local string="\
${bold}iTerm Hotkeys${reset}
⌘ ;\t${yellow}Open Autocomplete${reset}
⌘ ⇧ ;\t${yellow}Open Command History${reset}
⌘ ⇧ H\t${yellow}Open Paste History${reset}
⌘ ⌥ /\t${yellow}Open Recent Directories${reset}
⌘ ⌥ B\t${yellow}Start Instant Replay${reset}"
	echo $string
}

# Cheatsheet for mac
mac() {
	local string="\
${bold}macOS Hotkeys${reset}
⌘ \`\t${yellow}Cycle Through Windows${reset}
⌘ ↑\t${yellow}Enclosing Folder${reset}
⌘ ↓\t${yellow}Open the selected item${reset}"
	echo $string
}

# Open man page in Google Chrome
manchrome() {
	man "$1" | col -b >"/tmp/$1"
	open -a "/Applications/Google Chrome.app" "/tmp/$1"
}

# Open man page in VSCode
# If `open` doesn't work use `code`, (open is faster)
mancode() {
	man "$1" | col -b >"/tmp/$1"
	open file:///private/tmp/$1
}

# Open man page in Preview
manpreview() {
	man -t "$@" | open -fa Preview
}

# Create a new directory and enter it
mkd() {
	mkdir -p "$@" && cd "$_"
}

# Easy custom Mac notifications from iTerm2 and VSCode
# notify() {
# 	if [[ $TERM_PROGRAM == 'iTerm.app' ]]; then
# 		terminal-notifier -group "ITERM" -title $1 -message $2 -sender "com.googlecode.iterm2" -sound "default"
# 	else
# 		terminal-notifier -group "VISUAL STUDIO CODE" -title $1 -message $2 -sender "com.microsoft.VSCode" -sound "default"
# 	fi
# }

# Reload scripts &/or shell
# r() {
# 	case $1 in
# 	-v | -l)
# 		zpl update --all -q && tput cl && src
# 		;;
# 	*)
# 		zpl update -q "$DOTS/_aliases" "$DOTS/_functions" && tput cl
# 		;;
# 	esac
# }

# Fully reinstall node_modules to fix NPM errors
reinstall() {
	printf "Are you sure you want to ${bold}reinstall$reset $yellow/node_modules$reset? [${green}y$reset/${red}n$reset]: "
	if read -q; then
		printf "\nRunning ${bold}rm package-lock.json$reset...\n" && rm package-lock.json
		printf "Running ${bold}rm -rf node_modules$reset...\n" && rm -rf node_modules
		printf "Running ${bold}npm install$reset...\n" && npm install
	else
		printf "\n${bold}reinstall$reset aborted!\n"
	fi
}

# Check active shell on Mac
shell() {
	echo $SHELL
	printf "Brew zsh location: ${bold}/usr/local/bin/zsh\n$reset"
	dscl . -read /Users/$USER UserShell
	printf "1st line in ${bold}SHELLS$reset: " && sed -n 5p /etc/shells
	printf "1st line in ${bold}PATHS$reset: " && head -n 1 /etc/paths
}

# Verify that SSD Mac is not saving sleep images
sleepimage() {
	pmset -g | grep hibernatemode
	ls -lh /private/var/vm/sleepimage | grep B
}

# TODO Turn into git custom command https://coderwall.com/p/bt93ia/extend-git-with-custom-commands
syncfork() {
	# https://help.github.com/en/articles/syncing-a-fork
	printf "Running ${bold}git remote add upstream \$1$reset...\n" && git remote add upstream $1
	printf "Running ${bold}git fetch upstream$reset...\n" && git fetch upstream
	printf "Running ${bold}git checkout master$reset...\n" && git checkout master
	printf "Running ${bold}git merge upstream/master$reset...\n" && git merge upstream/master
}

# Find local apps not installed using Homebrew Cask that have a cask
# uncasked() {
# 	local EXCLUDE="firefox-developer-edition gpg-keychain visual-studio-code-insiders iterm"
# 	local INCLUDE=""

# 	while IFS= read -r App; do
# 		local ID=$(mdls -name kMDItemCFBundleIdentifier /Applications/$App | cut -d \" -f2)
# 		if [[ $ID != com.apple* && $ID != "kMDItemCFBundleIdentifier = (null)" && $ID != *${EXCLUDE}* ]]; then
# 			INCLUDE+="$App\n"
# 		fi
# 	done <<<$(ls /Applications)

# 	grep -Fxv -f <(brew cask ls) <(printf $INCLUDE | sed -e 's/.app//g' -e 's/-//g' -e 's/  / /g' -e 's/ /-/g' | tr '[:upper:]' '[:lower:]')
# }

# Update all system tools
update() {
	printf "$greenb${black} START $reset $bold${green}update$reset!\n"
	printf "${bold}upgrade_oh_my_zsh${reset}... " && upgrade_oh_my_zsh | head -2
	printf "${bold}git pull$reset ${blue}powerlevel9k.zsh-theme$reset... " && cd $ZSH/custom/themes/powerlevel9k && git pull && cd - >/dev/null
	printf "${bold}git pull$reset ${blue}fast-syntax-highlighting$reset... " && cd $ZSH/custom/plugins/fast-syntax-highlighting && git pull && cd - >/dev/null
	printf "${bold}git pull$reset ${blue}zsh-atutosuggestions$reset... " && cd $ZSH/custom/plugins/zsh-autosuggestions && git pull && cd - >/dev/null
	# printf "${bold}zplugin update --all${reset}\n" && zplugin update --all
	printf "${bold}rustup update $reset" && rustup update
	printf "${bold}brew upgrade$reset\n" && brew upgrade
	printf "${bold}brew cask upgrade $reset" && brew cask upgrade
	printf "${bold}brew cleanup$reset\n" && brew cleanup
	printf "${bold}npm update --global$reset\n" && npm update --global
	printf "${bold}mas upgrade $reset" && mas upgrade
	printf "${bold}tldr --update$reset\n" && tldr --update
	printf "${bold}softwareupdate --list$reset\n" && softwareupdate --list
	printf "$redb${black} END $reset $bold${green}update$reset!\n"
	# notify "update" "Done!"
}

# List versions of all system tools
v() {
	case $1 in
	-v | v | -l | l)
		printf "${bold}iTerm${reset} $(defaults read /Applications/iTerm.app/Contents/Info CFBundleVersion | head -c 5)\n"
		printf "${bold}oh-my-zsh${reset} ${ZSH_VERSION}\n"
		printf "${bold}Rust${reset} $(rustc --version | cut -f2)\n"
		printf "\n${bold}mas${reset} $(mas version)\n"
		mas list
		printf "\n${bold}npm${reset} $(npm -v)\n"
		npm list --global --depth=0 | tail -n +2 | cut -c 5-
		printf "\n${bold}Homebrew${reset} $(brew -v | xargs | head -c 14 | tail -c 5)${reset}\n"
		brew list --versions $(brew leaves)
		printf "\n${bold}Casks${reset}\n"
		brew cask list --versions
		;;
	*)
		printf "${bold}iTerm${reset} $(defaults read /Applications/iTerm.app/Contents/Info CFBundleVersion | head -c 5)\n"
		printf "${bold}oh-my-zsh${reset} ${ZSH_VERSION}\n"
		printf "${bold}Rust${reset} $(rustc --version | awk '{print $2}')\n"
		printf "${bold}Homebrew${reset} $(brew -v | xargs | head -c 14 | tail -c 5)\n"
		printf "${bold}Node${reset} $(node -v | tail -c 8)\n"
		printf "${bold}npm${reset} $(npm -v)\n"
		printf "${bold}Vue${reset} $(vue --version)\n"
		# grep -E '\s([0-9].*)'
		;;
	esac
}

# ESLint-warning-free webpack output for Vue CLI
wo() {
	printf "/* eslint-disable */\nconst webpack_output = " >webpack_output.js
	vue inspect | sed "s/native code/'native code'/g" >>webpack_output.js
	code webpack_output.js
}
